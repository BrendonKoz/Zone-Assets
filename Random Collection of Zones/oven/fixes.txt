in \trunk\infserver.database\server\objects\chat.cs
line 84: change line to this
            return builder.ToString().TrimEnd(',', ' '));

in \trunk\infserver\game\commands\chat\commands.cs
line 10: add in 
using InfServer.DirectoryServer.Directory;

line 1117: add in 
			    //Get a new updated zone list first
				Program.server.grabZones();
				

in \trunk\infserver\game\arena\scrpitarena.cs
before line 121: add this
			//Respawn the flags
			flagSpawn();

lines 1231 to 1232: change it to this
							foreach (Player p in getPlayersInRange(posX, posY, item.areaEffectRadius))
							{
								//Is he dead, on the correct team or warpable?
								if (!p.IsDead && target._team == p._team && p.ActiveVehicle._type.IsWarpable)
								    p.warp(Helpers.ResetFlags.ResetNone, target._state, (short)item.accuracyRadius, -1, 0);
							}
lines 1263 to 1264: change it to this
							foreach (Player p in getPlayersInRange(posX, posY, item.areaEffectRadius))
							{
								//Is the player in range dead?
								if (!p.IsDead)
								    p.warp(Helpers.ResetFlags.ResetNone, target._state, (short)item.accuracyRadius, -1, 0);
							}
lines 1302 to 1306: change it to this
							foreach (Player p in getPlayersInRange(target._state.positionX, target._state.positionY, item.areaEffectRadius))
							{
								//Is he dead, on the correct team, warpable or ignoring summons?
								if (!p.IsDead 
								    && target._team == p._team 
								    && p.ActiveVehicle._type.IsWarpable
								    && (!p._summonIgnore.Contains(player._alias) || !p._summonIgnore.Contains("*")))
								    p.warp(Helpers.ResetFlags.ResetNone, player._state, (short)item.accuracyRadius, -1, 0);
							}
lines 1333 to 1337: change it to this
							foreach (Player p in getPlayersInRange(target._state.positionX, target._state.positionY, item.areaEffectRadius))
							{
							    //Is the player dead, or warpable?
								if (!p.IsDead && p.ActiveVehicle._type.IsWarpable)
									p.warp(Helpers.ResetFlags.ResetNone, player._state, (short)item.accuracyRadius, -1, 0);
							}
line 1345 to 1351 replace case ItemInfo.WarpItem.WarpMode.Portal to this
				case ItemInfo.WarpItem.WarpMode.Portal:
				    {
					//Forward it to the script for now
		                	if (exists("Player.WarpItem") && !(bool)callsync("Player.WarpItem", false, player, item, targetPlayerID, posX, posY))                                                  
                		    	    return;

					if (item.areaEffectRadius > 0)
					{
					    foreach (Player p in getPlayersInRange(posX, posY, item.areaEffectRadius))
					    {
						//Is the player dead?
						if (!p.IsDead)
						    p.warp(Helpers.ResetFlags.ResetNone, player._state, (short)item.accuracyRadius, -1, 0);
					    }
					}
					else
					    
				    }
				    break;


in trunk\infserver\game\arena\arena.cs
at line 488: add this
					t = getTerrain(player._state.positionX, player._state.positionY);
					
					//Check maxTimeAllowed inactivity
					if (t._server.zoneConfig.arena.maxTimeAllowed > 0)
					{
					    int maxTime = (t._server.zoneConfig.arena.maxTimeAllowd * 1000);
						
						//Send to spectator due to inactivity
						//Note: We do the check for over max first
						if ((now - player._lastMovement) > maxTime && player._lastMovement != 0)
						{
						    player.spec();
							player.sendMessage(-1, "You have been sent to spectator mode due to inactivity.");
						}
						//Send message at half of max time
						if ((now - player._lastMovement) >= (maxTime / 2) && player._lastMovement != 0)
						{
						    string format = "WARNING! Staying in this location longer than {0} seconds will send you to spectator mode.";
							player.sendMessage(-1, String.Format(format, (maxTime / 2)));
						}
					}

delete line 516: should look like this
						t = getTerrain(player._state.positionX, player._state.positionY);
